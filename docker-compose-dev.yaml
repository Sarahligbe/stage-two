name: hng-stage-two

services:
  frontend:
    build:
      context: frontend
    container_name: frontend
    networks:
      - hng-network
    restart: unless-stopped
    working_dir: /frontend
    volumes: 
      - ./frontend:/frontend
    env_file:
      - ./frontend/.env
      - .env
    labels:
      - traefik.enable=true
      - traefik.docker.network=hng-network
      - traefik.constraint-label=stagetwo
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http

  backend:
    build:
      context: backend
      dockerfile: Dockerfile.dev
    container_name: backend
    networks:
      - hng-network
    restart: unless-stopped
    working_dir: /backend
    volumes: 
      - ./backend:/backend
    env_file:
      - ./backend/.env
      - .env
    labels:
      - traefik.enable=true
      - traefik.docker.network=hng-network
      - traefik.constraint-label=stagetwo
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=(Host(`${DOMAIN?Variable not set}`)) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`))
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http

  db:
    image: postgres:14.12
    container_name: db
    restart: always
    volumes:
      - pg-data:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432" 
    networks: 
      - hng-network
  
  adminer:
    image: adminer:4
    restart: always
    networks:
      - hng-network
    depends_on:
      - db
    env_file:
      - ./backend/.env
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
      - ADMINER_DEFAULT_SERVER=db
    labels:
      - traefik.enable=true
      - traefik.docker.network=hng-network
      - traefik.constraint-label=stagetwo
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`db.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http

  proxy:
    image: traefik:3.0
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      # Traefik dashboard
      - 8090:8080
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the custom hng-network
      - traefik.docker.network=hng-network
      #Use services with this label
      - traefik.constraint-label=stagetwo
    networks:
      - hng-network

volumes:
  pg-data:

networks: 
  hng-network:
    driver: bridge